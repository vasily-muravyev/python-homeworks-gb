# Задание 3

# Реализовать программу работы с органическими клетками.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.

# В методе деления должно осуществляться округление значения до целого числа.

# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно
# равняться сумме ячеек исходных двух клеток.

# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.

# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.

# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(),
# принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.

# Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.

# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.

# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class SubtractCellsError(BaseException):
    pass


class Cell:
    def __init__(self, num_cells):
        self.__num_cells = num_cells

    @property
    def num_cells(self):
        return self.__num_cells

    def make_order(self, cells_in_row):
        return ('*' * cells_in_row + '\n') * (self.num_cells // cells_in_row) \
               + '*' * (self.num_cells % cells_in_row) + '\n'

    def __add__(self, other):
        return Cell(self.num_cells + other.num_cells)

    def __sub__(self, other):
        if self.num_cells >= other.num_cells:
            return Cell(self.num_cells - other.num_cells)
        else:
            raise SubtractCellsError

    def __mul__(self, other):
        return Cell(self.num_cells * other.num_cells)

    def __truediv__(self, other):
        return Cell(self.num_cells // other.num_cells)


cell1 = Cell(3)
cell2 = Cell(10)
cell3 = Cell(5)
cell4 = Cell(7)

for cell in [cell1, cell2, cell3, cell4]:
    print(cell.make_order(4))

print((cell1 + cell3).make_order(6))

try:
    diff = cell3 - cell4
except SubtractCellsError:
    print('SubtractCellsError\n')

print((cell4 - cell3).make_order(1))

print((cell2 * cell4 * cell1).make_order(40))

print((cell2 / cell1).make_order(2))